stages:
  - setup_auth
  - identify_changes
  - gitleaks_scan
  - iac_scan
  - validate_and_plan
  - planfile_upload
  - download_tfplan
  - terraform_apply



# --- Authentication Setup ---
generate-gcp-auth-config:
  stage: setup_auth
  image: google/cloud-sdk:slim
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: "//iam.googleapis.com/projects/752048956469/locations/global/workloadIdentityPools/wif-rappit-gitlab-iac-pool/providers/gitlab"
  script:
    - AUTH_DIR="${CI_PROJECT_DIR}/_auth"
    - mkdir -p "${AUTH_DIR}"
    - JWT_FILE_PATH="${AUTH_DIR}/.ci_job_jwt_file" # Absolute path for JWT file
    - CONFIG_FILE_PATH="${AUTH_DIR}/.gcp_temp_cred.json" # Absolute path for config file
    - echo "${GITLAB_OIDC_TOKEN}" > "${JWT_FILE_PATH}"
    # Create WIF config using absolute path for the credential_source_file
    - gcloud iam workload-identity-pools create-cred-config "${GCP_WORKLOAD_IDENTITY_PROVIDER}" --service-account="${TERRAFROM_PLAN_SERVICE_ACCOUNT}" --output-file="${CONFIG_FILE_PATH}" --credential-source-file="${JWT_FILE_PATH}"
  artifacts:
    paths:
      - "${CI_PROJECT_DIR}/_auth/.gcp_temp_cred.json"
      - "${CI_PROJECT_DIR}/_auth/.ci_job_jwt_file"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - when: never

# --- Identify Changed Folders ---
identify_recent_changed_folders:
  stage: identify_changes
  image:
    name: google/cloud-sdk:slim
  needs:
    - job: generate-gcp-auth-config
      artifacts: true
  before_script:
    - |
      echo "Setting up GCP authentication for plan upload..."
      AUTH_DIR="${CI_PROJECT_DIR}/_auth"
      CRED_CONFIG_FILE="${AUTH_DIR}/.gcp_temp_cred.json" # This is the WIF config file
      JWT_FILE_PATH="${AUTH_DIR}/.ci_job_jwt_file"       # This is the GitLab OIDC token (referenced by CRED_CONFIG_FILE)

      echo "DEBUG: Checking for WIF config file: ${CRED_CONFIG_FILE}"
      if [ ! -f "${CRED_CONFIG_FILE}" ]; then
        echo "WIF config file (${CRED_CONFIG_FILE}) not found!"
        exit 1
      fi
      echo "DEBUG: Checking for JWT file: ${JWT_FILE_PATH}" # Ensure it's present as it's used by the WIF config
      if [ ! -f "${JWT_FILE_PATH}" ]; then
        echo "JWT file (${JWT_FILE_PATH}) not found! This is needed by the WIF config."
        exit 1
      fi
      
      export GOOGLE_APPLICATION_CREDENTIALS="${CRED_CONFIG_FILE}"

      # 2. Explicitly activate these credentials. This performs the token exchange.
      echo "Activating GCP credentials via gcloud auth login..."
      gcloud auth login --cred-file="${CRED_CONFIG_FILE}" --quiet
  script:
    - set -e # Exit immediately if a command exits with a non-zero status
    - git fetch --depth 2 origin
    - git diff --name-only HEAD^ HEAD > changed_files.txt
    - echo "Changed files:"
    - cat changed_files.txt
    - |
      bash -c '
        set -e
        FOLDERS=()
        # Check for base folder in changed files
        if grep -q "^base/" changed_files.txt; then
          FOLDERS+=("base") # Bash array append
        fi
        # Check for layer0 to layer10 in changed files
        for i in $(seq 0 10); do # seq is generally available
          if grep -q "^layer$i/" changed_files.txt; then
            FOLDERS+=("layer$i")
          fi
        done
        # If no folders were identified from changed files, then check for directory existence and root .tf files.
        if [ ${#FOLDERS[@]} -eq 0 ]; then # Bash array length check
          echo "No specific folders identified in changed files. Checking for existing tracked folders or Terraform files in root."
          # Add "base" if the directory exists
          if [ -d "base" ]; then
            FOLDERS+=("base")
          fi
          # Add "layerX" if the directory exists
          for i in $(seq 0 10); do
            if [ -d "layer$i" ]; then
              FOLDERS+=("layer$i")
            fi
          done
          # Add "file" if .tf files exist in the current directory.
          shopt -s nullglob # If no files match, the glob expands to an empty string
          tf_files=(./*.tf) # Check for .tf files in the current directory, ./* handles filenames starting with "-"
          shopt -u nullglob # Revert nullglob option to default behavior
          if [ ${#tf_files[@]} -gt 0 ]; then
              FOLDERS+=("file")
          fi
        fi
        # If FOLDERS is still empty after all checks, add "no_tf_files"
        if [ ${#FOLDERS[@]} -eq 0 ]; then
          FOLDERS+=("no_tf_files")
        fi
        printf "%s\n" "${FOLDERS[@]}" > folders.txt
      '
    - echo "Detected folders for changes:"
    - cat folders.txt
    ## Download checkov checks file from GCS
    - gcloud storage cp gs://${TF_PLAN_GCS}/checkov/checkov.txt "${CI_PROJECT_DIR}/_auth"
  artifacts:
    paths:
      - folders.txt
      - "${CI_PROJECT_DIR}/_auth/checkov.txt"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - when: never

##  -- Secrets_Scan
Secrets_Scan:
  stage: gitleaks_scan
  image: 
    name: ghcr.io/gitleaks/gitleaks:latest
    entrypoint: [""]
  needs:
  - job: identify_recent_changed_folders
    artifacts: true
  script:
    - echo "Running Gitleaks scan..."
    - gitleaks detect --source .  --no-git --verbose
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - when: never

## Vulnerability_Scan
Vulnerability_Scan:
  stage: iac_scan
  image: 
    name: bridgecrew/checkov:latest 
    entrypoint: [""]                
  needs: 
     - job: identify_recent_changed_folders
       artifacts: true
     - job: Secrets_Scan
  script:
    - |
      if [ ! -f "${CI_PROJECT_DIR}/_auth/checkov.txt" ]; then
        echo "checkov.txt not found!"
        exit 1
      fi
      checkov --directory . --check checkov.txt
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - when: never   

# --- Validation and Plan Job 
validate_and_plan:
  stage: validate_and_plan  
  image:
    name: "hashicorp/terraform:1.10.5"
    entrypoint: [""]
  needs:
    - job: generate-gcp-auth-config
      artifacts: true
    - job: identify_recent_changed_folders
      artifacts: true
    - job: Vulnerability_Scan
  before_script:
    - |
      AUTH_DIR="${CI_PROJECT_DIR}/_auth"
      CRED_CONFIG_FILE="${AUTH_DIR}/.gcp_temp_cred.json"
      echo "DEBUG: Checking for GOOGLE_APPLICATION_CREDENTIALS file: ${CRED_CONFIG_FILE}"
      if [ ! -f "${CRED_CONFIG_FILE}" ]; then
        echo "GOOGLE_APPLICATION_CREDENTIALS file not found!"
        exit 1
      fi
      export GOOGLE_APPLICATION_CREDENTIALS="${CRED_CONFIG_FILE}"
      git config --global credential.helper store
      echo "https://tf-module-token:${TOKEN_VALUE}@gitlab.com" > ~/.git-credentials
  script:
    - |
      if [ ! -f folders.txt ]; then
        echo "folders.txt artifact not found!"
        exit 1
      fi

      echo "Contents of folders.txt:"
      cat folders.txt && echo "---"

      mkdir -p "${CI_PROJECT_DIR}/_auth/planfiles"

      for folder_name in $(cat folders.txt); do
        echo "----------------------------------------"
        echo "Processing folder: $folder_name"
        echo "----------------------------------------"

        if [ "$folder_name" == "no_tf_files" ]; then
          echo "Skipping 'no_tf_files'."
          continue
        fi

        TERRAFORM_WORKING_DIR="."
        if [ "$folder_name" != "file" ]; then
          TERRAFORM_WORKING_DIR="${folder_name}"
        fi
        echo "-------------- Terraform Validation ------------"
        echo "Validating: ${TERRAFORM_WORKING_DIR}"
        echo "-------------------------------------------------"
        (cd "${TERRAFORM_WORKING_DIR}" && terraform init -input=false -reconfigure && terraform validate) || {
          echo "Validation failed in ${TERRAFORM_WORKING_DIR}"
          exit 1
        }
        echo "---------------Terraform Plan --------------------"
        echo "Planning: ${TERRAFORM_WORKING_DIR}"
        echo "-------------------------------------------------"
        (cd "${TERRAFORM_WORKING_DIR}" && terraform plan -input=false --out="${CI_PROJECT_DIR}/_auth/planfiles/${folder_name}.tfplan")
        echo "---"
      done
      echo "All folders validated and planned."
  artifacts:
    paths:
      - "${CI_PROJECT_DIR}/_auth/planfiles"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - when: never


## Terraform Plan Upload
terraform_plan_upload: # You might want to rename this job if it's no longer MR-specific
  stage: planfile_upload
  image:
    name: google/cloud-sdk:slim
    entrypoint: [""]
  needs:
    - job: generate-gcp-auth-config
      artifacts: true
    - job: validate_and_plan
      artifacts: true
  before_script:
    - |
      echo "Setting up GCP authentication for plan upload..."
      AUTH_DIR="${CI_PROJECT_DIR}/_auth"
      CRED_CONFIG_FILE="${AUTH_DIR}/.gcp_temp_cred.json" # This is the WIF config file
      JWT_FILE_PATH="${AUTH_DIR}/.ci_job_jwt_file"       # This is the GitLab OIDC token (referenced by CRED_CONFIG_FILE)

      echo "DEBUG: Checking for WIF config file: ${CRED_CONFIG_FILE}"
      if [ ! -f "${CRED_CONFIG_FILE}" ]; then
        echo "WIF config file (${CRED_CONFIG_FILE}) not found!"
        exit 1
      fi
      echo "DEBUG: Checking for JWT file: ${JWT_FILE_PATH}" # Ensure it's present as it's used by the WIF config
      if [ ! -f "${JWT_FILE_PATH}" ]; then
        echo "JWT file (${JWT_FILE_PATH}) not found! This is needed by the WIF config."
        exit 1
      fi
      
      export GOOGLE_APPLICATION_CREDENTIALS="${CRED_CONFIG_FILE}"

      # 2. Explicitly activate these credentials. This performs the token exchange.
      echo "Activating GCP credentials via gcloud auth login..."
      gcloud auth login --cred-file="${CRED_CONFIG_FILE}" --quiet
      echo "Successfully activated GCP credentials as $(gcloud config get-value account 2>/dev/null || echo 'N/A')." # Optional: confirm active account
      # Ensure TOKEN_VALUE is defined as a CI/CD variable in your GitLab project settings
      if [ -n "${TOKEN_VALUE}" ]; then
        echo "Setting up Git credentials for Terraform modules..."
        git config --global credential.helper store
        echo "https://tf-module-token:${TOKEN_VALUE}@gitlab.com" > ~/.git-credentials
        chmod 600 ~/.git-credentials # Secure the credentials file
      else
        echo "INFO: TOKEN_VALUE for GitLab module access is not set for this job. Public modules only."
      fi
  script:
    - |
      if gsutil -q stat "gs://${TF_PLAN_GCS}/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}/*"; then
        echo "Folder exists."
        ls -lh "${CI_PROJECT_DIR}/_auth/planfiles"
        gcloud storage rm "gs://${TF_PLAN_GCS}/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}/*"
        gcloud storage cp "${CI_PROJECT_DIR}/_auth/planfiles/*" "gs://${TF_PLAN_GCS}/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}/"
      else
        echo "Folder does not exist."
        ls -lh "${CI_PROJECT_DIR}/_auth/planfiles"
        gcloud storage cp "${CI_PROJECT_DIR}/_auth/planfiles/*" "gs://${TF_PLAN_GCS}/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}/"
      fi
      
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: on_success
    - when: never


## Download Terraform Plan File
download_tfplan:
  stage: download_tfplan
  image: google/cloud-sdk:slim
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: "//iam.googleapis.com/projects/752048956469/locations/global/workloadIdentityPools/wif-rappit-gitlab-iac-pool/providers/gitlab"
  script:
    - AUTH_DIR="${CI_PROJECT_DIR}/_auth/cred_apply"
    - mkdir -p "${AUTH_DIR}"
    - JWT_FILE_PATH="${AUTH_DIR}/.ci_job_jwt_file" # Absolute path for JWT file
    - CONFIG_FILE_PATH="${AUTH_DIR}/.gcp_temp_cred.json" # Absolute path for config file
    - echo "${GITLAB_OIDC_TOKEN}" > "${JWT_FILE_PATH}"
    # Create WIF config using absolute path for the credential_source_file
    - gcloud iam workload-identity-pools create-cred-config "${GCP_WORKLOAD_IDENTITY_PROVIDER}" --service-account="${TERRAFORM_APPLY_SERVICE_ACCOUNT}" --output-file="${CONFIG_FILE_PATH}" --credential-source-file="${JWT_FILE_PATH}"
    - echo "Activating GCP credentials via gcloud auth login..."
    - gcloud auth login --cred-file="${AUTH_DIR}/.gcp_temp_cred.json" --quiet
    - mkdir ${CI_PROJECT_DIR}/_auth/cred_apply/plans
    - echo $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - gsutil cp "gs://${TF_PLAN_GCS}/${CI_COMMIT_BRANCH}/*" "${CI_PROJECT_DIR}/_auth/cred_apply/plans"
    - ls -lh "${CI_PROJECT_DIR}/_auth/cred_apply/plans"
  artifacts:
    paths:
      - "${CI_PROJECT_DIR}/_auth/cred_apply/.gcp_temp_cred.json"
      - "${CI_PROJECT_DIR}/_auth/cred_apply/.ci_job_jwt_file"  
      - "${CI_PROJECT_DIR}/_auth/cred_apply/plans"
  rules:
     - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_PROTECTED == "true"'
       when: always
     - when: never

## Terraform Apply
terraform_apply:
  stage: terraform_apply
  image:
    name: "hashicorp/terraform:1.10.5"
    entrypoint: [""]
  needs:
    - job: download_tfplan
      artifacts: true
  variables:
    LAYERS_TO_APPLY: ""
  before_script:
    - |
      AUTH_DIR="${CI_PROJECT_DIR}/_auth"
      CRED_CONFIG_FILE="${AUTH_DIR}/cred_apply/.gcp_temp_cred.json"
      echo "DEBUG: Checking for GOOGLE_APPLICATION_CREDENTIALS file: ${CRED_CONFIG_FILE}"
      if [ ! -f "${CRED_CONFIG_FILE}" ]; then
        echo "GOOGLE_APPLICATION_CREDENTIALS file not found!"
        exit 1
      fi
      export GOOGLE_APPLICATION_CREDENTIALS="${CRED_CONFIG_FILE}"
      git config --global credential.helper store
      echo "https://tf-module-token:${TOKEN_VALUE}@gitlab.com" > ~/.git-credentials
  script:
    - |
      echo $LAYERS_TO_APPLY
      if [ -z "$LAYERS_TO_APPLY" ]; then
        echo "ERROR: LAYERS_TO_APPLY variable is not set!"
        exit 1
      fi
      OLD_IFS="$IFS"
      IFS=','

      # Loop through each plan filename provided in LAYERS_TO_APPLY
      for plan_filename_raw in $LAYERS_TO_APPLY; do
        IFS="$OLD_IFS"

        # Trim leading/trailing whitespace from the plan filename
        plan_filename=$(echo "$plan_filename_raw" | xargs)
        cd $plan_filename
        echo "-----------------------------------"
        echo "------Applying $plan_filename------"
        echo "-----------------------------------"
        terraform init --reconfigure
        terraform show ${CI_PROJECT_DIR}/_auth/cred_apply/plans/${plan_filename}.tfplan
        terraform apply -input=false "${CI_PROJECT_DIR}/_auth/cred_apply/plans/${plan_filename}.tfplan"
        cd $CI_PROJECT_DIR
      done
  rules:
     - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_PROTECTED == "true"'
       when: manual
     - when: never







